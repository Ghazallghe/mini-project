import java.awt.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;


public class Game {
    File scoreFile = new File("/home/ghazal/Desktop/mini-project/src/score.txt");
    ArrayList<Integer> scores = SignUp.scores();

    public Game() throws FileNotFoundException {
    }

    public static String chooseRandomWord() {
        String[] wordsArray = {"tehran", "pizza", "banana", "new york", "advanced programming", "michael jordan",
                "lionel messi", "apple", "macaroni", "university", "intel", "kitten", "python", "java",
                "data structures", "algorithm", "assembly", "basketball", "hockey", "leader", "javascript",
                "toronto", "united states of america", "psychology", "chemistry", "breaking bad", "physics",
                "abstract classes", "linux kernel", "january", "march", "time travel", "twitter", "instagram",
                "dog breeds", "strawberry", "snow", "game of thrones", "batman", "ronaldo", "soccer",
                "hamburger", "italy", "greece", "albert einstein", "hangman", "clubhouse", "call of duty",
                "science", "theory of languages and automata"};
        int randomNumber = (int)(Math.random()*wordsArray.length);
        return wordsArray[randomNumber];
    }
    public static StringBuilder assignBlankSpace(String chosenWord){
        StringBuilder blankSpace = new StringBuilder("");
        for (int i = 0; i < chosenWord.length(); i++) {
            if(chosenWord.charAt(i) != ' ')
                blankSpace.append('-');
            else
                blankSpace.append(' ');
        }
       return blankSpace;
    }
    public static char getCharResponse(){
        MainClass.footer();
        Scanner input = new Scanner(System.in);
        return input.next().charAt(0);
    }
    public void fillTheBlanks() throws InterruptedException, IOException {
        String chosenWord = chooseRandomWord();
        StringBuilder blankSpace = assignBlankSpace(chosenWord);
        if(chosenWord.length() < 9){
            guessing(chosenWord,blankSpace,7);
        }
        else {
            guessing(chosenWord,blankSpace,14);
        }
    }
    void redOrGreen(int n,int errors){
        char[] table = new char[2 * n + 1];
        for (int i = 0; i <= 2 * n; i++) {
            if (i % 2 == 0) {
                table[i] = '|';
            } else if(i % 2 != 0) {
                table[i] = 'V';
            }
        }
        for (int i = 1; i < errors * 2; i += 2) {
            table[i] = 'X';
        }
        for (int i = 0; i < table.length; i++) {
            if(table[i] == 'V'){
                System.out.print(Colors.GREEN + table[i] + Colors.RESET);
            }
            else if(table[i] == 'X'){
                System.out.print(Colors.RED + table[i] + Colors.RESET);
            }
            else {
                System.out.print(table[i]);
            }
        }
    }
    public void guessing(String chosenWord, StringBuilder blankSpace, int n) throws InterruptedException, IOException {
        int errors = 0 , i = 0 , onlyOneHint = 0;
        boolean flag = true;
        String answers = "";
        callThemAll(n,errors,blankSpace,answers,onlyOneHint);
        while(errors < n) {
            String tempBlankSpace = blankSpace.toString();
            if (!tempBlankSpace.contains("-")) {
                win();
                flag = false;
                break;
            } else {
                char response = getCharResponse();
                if (response == '*' && onlyOneHint == 0) {
                    if(!blankSpace.equals(hint(blankSpace,chosenWord))) {
                        blankSpace = hint(blankSpace, chosenWord);
                        answers += alphabet(answers, blankSpace);
                    }
                    onlyOneHint++;
                    callThemAll(n, errors, blankSpace, answers, onlyOneHint);
                }else if(response == '*' && onlyOneHint > 0){
                    MainClass.changeCursor(19,MainClass.getColumns() / 2 - 20);
                    System.out.println(Colors.RED_BOLD_BRIGHT + "You already used your hint" + Colors.RESET);
                    TimeUnit.SECONDS.sleep(2);
                    callThemAll(n,errors,blankSpace,answers,onlyOneHint);
                } else {
                    if (answers.indexOf(response) == -1) {
                        answers += response;
                    } else {
                        MainClass.changeCursor(19,MainClass.getColumns() / 2 - 20);
                        System.out.println(Colors.RED_BOLD_BRIGHT + "You have already chosen this alphabet please try again!" +Colors.RESET);
                        TimeUnit.SECONDS.sleep(2);
                        callThemAll(n, errors, blankSpace, answers, onlyOneHint);
                        continue;
                    }
                    if (chosenWord.indexOf(response) != -1) {
                        blankSpace = correctAlphabets(response, blankSpace, chosenWord);
                    } else {
                        errors++;
                    }
                    callThemAll(n, errors, blankSpace, answers, onlyOneHint);
                }
            }
        }
        if(flag){
            gameOver(chosenWord);
        }
    }
    public static StringBuilder correctAlphabets(char response,StringBuilder blankSpace,String chosenWord){
        for (int i = 0; i < chosenWord.length(); i++) {
            if(chosenWord.charAt(i) == response){
                blankSpace.setCharAt(i, response);
            }
        }
        return blankSpace;
    }
    public static void printUsedAlphabets(String answers){
        for (int i = 0; i < answers.length(); i++) {
            MainClass.changeCursor(14,MainClass.getColumns() / 2 - (20 - 2 * i));
            System.out.print(Colors.CYAN_BOLD + answers.charAt(i) + Colors.RESET);
        }
    }
    public static void draw(int error){
        switch (error){
            case 0 : Hangman.first();
            break;
            case 1 : Hangman.second();
            break;
            case 2 : Hangman.third();
            break;
            case 3 : Hangman.forth();
            break;
            case 4 : Hangman.fifth();
            break;
            case 5 : Hangman.sixth();
            break;
            case 6 : Hangman.seventh();
            break;
            case 7 : Hangman.eight();
            break;
        }
    }
    public static void nineOrMore(int n,int error){
        if(n == 7){
            draw(error);
        }
        else{
            if(error % 2 == 0)
                draw(error / 2);
            else {
                draw((error - 1) / 2);
            }
        }
    }
    void callThemAll(int n, int errors, StringBuilder blankSpace, String answers,int onlyOneHint){
        MainClass.clearScreen();
        nineOrMore(n,errors);
        MainClass.changeCursor(12,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.BLUE_BRIGHT + blankSpace + Colors.RESET);
        printUsedAlphabets(answers);
        System.out.println();
        MainClass.changeCursor(10,MainClass.getColumns() / 2 + 10);
        System.out.println(Colors.YELLOW_BRIGHT+ "score:" + scores.get(SignUp.whichPlayer) + Colors.RESET);
        MainClass.changeCursor(15,MainClass.getColumns() / 2 - 20);
        redOrGreen(n,errors);
        System.out.println();
        MainClass.changeCursor(17,MainClass.getColumns() / 2 - 20);
        if(onlyOneHint == 0)
            System.out.println(Colors.PURPLE_BRIGHT + "*Hint (for using hint please enter *  you're allowed to use it once in the game and it will take 10 scores)" + Colors.RESET);
    }

    void win() throws IOException, InterruptedException {
        TimeUnit.SECONDS.sleep(1);
        MainClass.clearScreen();
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "Congratulations you win,you earned 5 scores!" + Colors.RESET);
        scores.set(SignUp.whichPlayer,scores.get(SignUp.whichPlayer) + 5);
        rewriteScoresFile();
        TimeUnit.SECONDS.sleep(4);
        MainClass.clearScreen();
        MainClass.startGameOrLeaderBoard();
    }
    public static void deleteFile(File file) throws IOException {
        FileWriter usernameWriter = new FileWriter(file);
        usernameWriter.write("");
    }
    void gameOver(String chosenWord) throws InterruptedException, IOException {
        MainClass.clearScreen();
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.CYAN_BOLD_BRIGHT + chosenWord + Colors.RESET);
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "Game Over :(" + Colors.RESET);
        rewriteScoresFile();
        TimeUnit.SECONDS.sleep(5);
        MainClass.clearScreen();
        MainClass.startGameOrLeaderBoard();
    }
    StringBuilder hint(StringBuilder blankSpace,String chosenWord) throws InterruptedException {
        if(scores.get(SignUp.whichPlayer) >= 10) {
            scores.set(SignUp.whichPlayer, scores.get(SignUp.whichPlayer) - 10);
            int randomAlphabet = (int) (Math.random() * chosenWord.length());
            do {
                randomAlphabet = (int) (Math.random() * chosenWord.length());
                if (blankSpace.charAt(randomAlphabet) == '-') {
                    for (int i = 0; i < chosenWord.length(); i++) {
                        if(chosenWord.charAt(i) == chosenWord.charAt(randomAlphabet)){
                            blankSpace.setCharAt(i, chosenWord.charAt(randomAlphabet));
                        }
                    }
                    return blankSpace;
                }
            } while (blankSpace.charAt(randomAlphabet) != '-');
        }else {
            MainClass.changeCursor(19,MainClass.getColumns() / 2 - 20);
            System.out.println(Colors.RED_BOLD_BRIGHT + "You don't have enough scores :(" + Colors.RESET);
            TimeUnit.SECONDS.sleep(2);
        }
        return blankSpace;
    }
    char alphabet(String response,StringBuilder blankSpace){
        for (int i = 0; i < blankSpace.length(); i++) {
            if(blankSpace.charAt(i) != '-'){
                if(response.indexOf(i) == -1)
                    return blankSpace.charAt(i);
            }
        }
        return 0;
    }
    void rewriteScoresFile() throws IOException {
        deleteFile(scoreFile);
        for (int i = 0; i < scores.size(); i++) {
            SignUp.myFileWriter(scoreFile,scores.get(i).toString());
        }
    }
}
class Hangman{
    public static void first(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT +"----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void second(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void third(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println("|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void forth(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("| /");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void fifth(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("| /|");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void sixth(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("| /|\\");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
    public static void seventh(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("| /|\\");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println("| /");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.GREEN_BOLD_BRIGHT + "|" + Colors.RESET);
    }
    public static void eight(){
        MainClass.changeCursor(5,MainClass.getColumns() / 2 - 20);
        System.out.println(Colors.RED_BOLD_BRIGHT + "----");
        MainClass.changeCursor(6,MainClass.getColumns() / 2 - 20);
        System.out.println("|  |");
        MainClass.changeCursor(7,MainClass.getColumns() / 2 - 20);
        System.out.println("|  O");
        MainClass.changeCursor(8,MainClass.getColumns() / 2 - 20);
        System.out.println("| /|\\");
        MainClass.changeCursor(9,MainClass.getColumns() / 2 - 20);
        System.out.println("| / \\");
        MainClass.changeCursor(10,MainClass.getColumns() / 2 - 20);
        System.out.println("|" + Colors.RESET);
    }
}

